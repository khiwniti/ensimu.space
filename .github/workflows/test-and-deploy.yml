name: Enhanced Simulation System - Test & Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend Testing
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglu1-mesa \
          libxrender1 \
          libxext6 \
          libsm6 \
          libice6 \
          libfontconfig1 \
          libxss1 \
          libasound2

    - name: Install Python dependencies
      working-directory: ./ensumu-space/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run backend linting
      working-directory: ./ensumu-space/backend
      run: |
        pip install flake8 black isort mypy
        flake8 app tests --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check app tests
        isort --check-only app tests
        mypy app --ignore-missing-imports

    - name: Run unit tests
      working-directory: ./ensumu-space/backend
      run: |
        python run_tests.py --unit --cov-report=xml
      env:
        DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb

    - name: Run integration tests
      working-directory: ./ensumu-space/backend
      run: |
        python run_tests.py --integration --no-cov
      env:
        DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb

    - name: Run API tests
      working-directory: ./ensumu-space/backend
      run: |
        python run_tests.py --api --no-cov
      env:
        DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./ensumu-space/backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Testing
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./ensumu-space/frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./ensumu-space/frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./ensumu-space/frontend
      run: |
        npm run lint
        npm run type-check

    - name: Run frontend tests
      working-directory: ./ensumu-space/frontend
      run: npm run test:ci

    - name: Build frontend
      working-directory: ./ensumu-space/frontend
      run: npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: ./ensumu-space/frontend/dist

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      working-directory: ./ensumu-space/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run performance benchmarks
      working-directory: ./ensumu-space/backend
      run: |
        python run_tests.py --performance --benchmark

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: ./ensumu-space/backend/benchmark-results.json

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Python security scan
      working-directory: ./ensumu-space/backend
      run: |
        pip install safety bandit
        safety check -r requirements.txt
        bandit -r app/ -f json -o bandit-results.json

  # Documentation Generation
  docs-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install documentation dependencies
      run: |
        pip install mkdocs mkdocs-material mkdocstrings mkdocs-mermaid2-plugin

    - name: Build documentation
      run: |
        mkdocs build

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: ./site

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./ensumu-space/backend
        file: ./ensumu-space/backend/Dockerfile
        push: false
        tags: ensumu-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./ensumu-space/frontend
        file: ./ensumu-space/frontend/Dockerfile
        push: false
        tags: ensumu-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker containers
      run: |
        docker run --rm -d --name backend-test -p 8000:8000 ensumu-backend:test
        docker run --rm -d --name frontend-test -p 3000:3000 ensumu-frontend:test
        
        # Wait for containers to start
        sleep 30
        
        # Test backend health
        curl -f http://localhost:8000/enhanced-simulation/health || exit 1
        
        # Test frontend
        curl -f http://localhost:3000 || exit 1
        
        # Cleanup
        docker stop backend-test frontend-test

  # Deployment (only on main branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: ./ensumu-space/frontend/dist

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your deployment commands here
        # Examples:
        # - Deploy to AWS ECS/EKS
        # - Deploy to Azure Container Instances
        # - Deploy to Google Cloud Run
        # - Deploy to your own infrastructure
        
        echo "‚úÖ Staging deployment completed"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: ./ensumu-space/frontend/dist

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add your production deployment commands here
        
        echo "‚úÖ Production deployment completed"

    - name: Post-deployment tests
      run: |
        echo "üß™ Running post-deployment smoke tests..."
        # Add smoke tests for production environment
        # curl -f https://your-production-url/health
        
        echo "‚úÖ Post-deployment tests passed"

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' }}
      run: |
        echo "‚úÖ All tests passed successfully!"
        # Add notification logic (Slack, Teams, etc.)

    - name: Notify on failure
      if: ${{ needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' }}
      run: |
        echo "‚ùå Tests failed!"
        # Add failure notification logic