# HAProxy production configuration for ensimu-space
# Load balancer and reverse proxy configuration

global
    daemon
    user haproxy
    group haproxy
    
    # Performance tuning
    maxconn 4096
    nbproc 1
    nbthread 4
    
    # Logging
    log stdout local0 info
    
    # SSL/TLS settings
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!SHA1:!AESCCM
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!SHA1:!AESCCM
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Security
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option http-server-close
    
    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 10s
    
    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Statistics interface
frontend stats
    bind *:8404
    http-request use-service prometheus-exporter if { path /metrics }
    stats enable
    stats uri /stats
    stats refresh 30s
    stats hide-version
    stats realm HAProxy\ Statistics
    stats auth admin:${HAPROXY_STATS_PASSWORD:-admin}

# HTTP frontend
frontend http_frontend
    bind *:80
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 20 }
    
    # Health check
    http-request return status 200 content-type text/plain string "healthy" if { path /health }
    
    # Route to backends
    use_backend api_backend if { path_beg /api/ }
    use_backend ws_backend if { path_beg /ws/ }
    use_backend metrics_backend if { path_beg /metrics }
    default_backend web_backend

# HTTPS frontend (uncomment for SSL)
# frontend https_frontend
#     bind *:443 ssl crt /etc/ssl/certs/haproxy.pem
#     
#     # Security headers for HTTPS
#     http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
#     http-response set-header X-Frame-Options DENY
#     http-response set-header X-Content-Type-Options nosniff
#     http-response set-header X-XSS-Protection "1; mode=block"
#     
#     # Route to backends (same as HTTP)
#     use_backend api_backend if { path_beg /api/ }
#     use_backend ws_backend if { path_beg /ws/ }
#     use_backend metrics_backend if { path_beg /metrics }
#     default_backend web_backend

# Backend for API requests
backend api_backend
    balance roundrobin
    option httpchk GET /api/health
    http-check expect status 200
    
    # Backend servers
    server backend1 backend:8000 check inter 10s fall 3 rise 2 weight 100
    # Add more backend servers for load balancing:
    # server backend2 backend2:8000 check inter 10s fall 3 rise 2 weight 100
    # server backend3 backend3:8000 check inter 10s fall 3 rise 2 weight 100

# Backend for WebSocket connections
backend ws_backend
    balance source
    option httpchk GET /ws/health
    http-check expect status 200
    
    # WebSocket-specific settings
    timeout tunnel 3600s
    
    # Backend servers
    server backend1 backend:8000 check inter 30s fall 3 rise 2 weight 100
    # Add more backend servers for WebSocket load balancing:
    # server backend2 backend2:8000 check inter 30s fall 3 rise 2 weight 100

# Backend for metrics
backend metrics_backend
    balance roundrobin
    option httpchk GET /metrics
    http-check expect status 200
    
    # Backend servers
    server backend1 backend:8001 check inter 30s fall 3 rise 2 weight 100
    # Add more backend servers for metrics:
    # server backend2 backend2:8001 check inter 30s fall 3 rise 2 weight 100

# Backend for web frontend
backend web_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Frontend servers
    server frontend1 frontend:80 check inter 10s fall 3 rise 2 weight 100
    # Add more frontend servers for load balancing:
    # server frontend2 frontend2:80 check inter 10s fall 3 rise 2 weight 100
    # server frontend3 frontend3:80 check inter 10s fall 3 rise 2 weight 100

# Backend for database connections (if needed)
backend db_backend
    mode tcp
    balance leastconn
    option tcp-check
    
    # Database servers
    server postgres1 postgres:5432 check inter 10s fall 3 rise 2 weight 100
    # Add more database servers for clustering:
    # server postgres2 postgres2:5432 check inter 10s fall 3 rise 2 weight 100 backup

# Backend for Redis connections (if needed)
backend redis_backend
    mode tcp
    balance first
    option tcp-check
    
    # Redis servers
    server redis1 redis:6379 check inter 10s fall 3 rise 2 weight 100
    # Add Redis replicas:
    # server redis2 redis2:6379 check inter 10s fall 3 rise 2 weight 100 backup